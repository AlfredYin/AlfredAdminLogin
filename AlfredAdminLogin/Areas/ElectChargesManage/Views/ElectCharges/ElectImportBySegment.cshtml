@{
    Layout = "~/Views/Shared/_FormWhite.cshtml";
}

@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment
@section header{
    @BundlerHelper.Render(HostingEnvironment.ContentRootPath, Url.Content("~/lib/fileinput/5.0.3/css/fileinput.min.css"))
    @BundlerHelper.Render(HostingEnvironment.ContentRootPath, Url.Content("~/lib/fileinput/5.0.3/js/fileinput.min.js"))
}

<div class="wrapper animated fadeInRight">
    <div class="form-group">
            <h3>根据模板样式导入电量数据</h3>
    </div>
    <form id="form" class="form-horizontal m">
        <div class="form-group">
            <label class="col-sm-2 control-label ">选择文件</label>
            <div class="col-sm-10">
                <input id="importFile" type="file">
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label "></label>
            <div class="control-label" style="text-align:center">
                <a href='@Url.Content("~/template/峰尖峰谷深谷四段电量模板.xlsx")' class="btn btn-default btn-xs"><i class="fa fa-file-excel-o"></i> 下载模板</a>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label "></label>
            <div class="col-sm-10 text-danger">
                请导入峰尖峰谷深谷四段电量数据文件<br />
                提示：仅允许导入“xls”或“xlsx”格式文件！
            </div>
        </div>
    </form>
</div>

<script type="text/javascript">
    
    //
    var filePath = undefined;

    /*
    这是一个使用jQuery的fileinput插件的示例代码。
    该示例使用`$("#importFile")`选择器选中一个具有`id="importFile"`的文件输入字段，并通过调用`.fileinput()`方法来初始化它。
    初始化时，我们可以传递一些参数来配置文件输入字段的行为。在这个例子中，`language: 'zh'`将文件输入字段的语言设置为中文。
    `uploadUrl`参数指定了文件上传的URL地址，使用了`@Url.Content("~/File/UploadFile")`来获取动态的URL，并传递了一个查询字符串参数`fileModule`，它表示了上传的文件模块。
    `showPreview: false`参数禁用了文件预览功能。`allowedFileExtensions`参数指定了允许上传的文件扩展名，这里只允许上传xls和xlsx文件。
    在初始化之后，我们通过调用`.on("fileuploaded", function (event, data) { ... })`来注册一个事件处理程序，在文件上传成功后执行。
    在事件处理程序中，我们通过`data.response`获取到服务器返回的JSON数据，并根据JSON数据中的字段值来进行相应的操作。
    这里我们假设返回的JSON数据有一个名为`Tag`的字段，如果它的值为1，则将返回数据中的`Data`字段赋值给变量`filePath`，否则将`filePath`置为空字符串。
    这段代码通过监听文件上传完成事件，并处理服务器返回的JSON数据，可以在前端获取到上传文件成功后服务器返回的路径（以供后续操作使用）。
    */
    $(document).ready(function () {
        $("#importFile").fileinput({
            language: 'zh',
            'uploadUrl': '@Url.Content("~/File/UploadFile")' + '?fileModule=@UploadFileType.Import.ParseToInt()',
            showPreview: false,
            allowedFileExtensions: ['xls', 'xlsx']
        }).on("fileuploaded", function (event, data) {
            var obj = data.response;
            if (obj.Tag == 1) {
                filePath = obj.Data;
            }
            else {
                filePath = '';
            }
        });
    });

    //
    function saveForm(index) {
        if (!filePath) {
            ys.alertError('文件未上传或者上传失败');
            return;
        }
        var postData = $("#form").getWebControls();
        postData.FilePath = filePath;
        ys.ajax({
            url: '@Url.Content("~/ElectChargesManage/ElectCharges/ImportElectBySegmentJson")',
            type: "post",
            data: postData,
            success: function (obj) {
                if (obj.Tag == 1) {
                    alert('计算成功: 电费 : '+obj.Message);
                    parent.layer.close(index);
                }
                else {
                    ys.msgError(obj.Message);
                }
            }
        });
    }
</script>
