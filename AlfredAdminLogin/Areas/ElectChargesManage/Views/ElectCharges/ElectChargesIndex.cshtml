@{
    Layout = "~/Views/Shared/_Index.cshtml";
}
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment
@section header{
    @BundlerHelper.Render(HostingEnvironment.ContentRootPath, Url.Content("~/lib/zTree/v3/css/metroStyle/metroStyle.min.css"))
    @BundlerHelper.Render(HostingEnvironment.ContentRootPath, Url.Content("~/lib/zTree/v3/js/ztree.min.js"))

    @BundlerHelper.Render(HostingEnvironment.ContentRootPath, Url.Content("~/lib/jquery.layout/1.4.4/jquery.layout-latest.min.css"))
    @BundlerHelper.Render(HostingEnvironment.ContentRootPath, Url.Content("~/lib/jquery.layout/1.4.4/jquery.layout-latest.min.js"))
}

<div class="container-div ui-layout-center">
    <div class="row">
        <div id="searchDiv" class="col-sm-12 search-collapse">
            <input type="hidden" id="departmentId" col="DepartmentId">
            <div class="select-list">
                <ul>
                    @*<li>
                        登录名称：<input id="userName" col="UserName" type="text" />
                    </li>
                    <li>
                        手机号码：<input id="mobile" col="Mobile" type="text" />
                    </li>
                    <li>
                        用户状态：<span id="userStatus" col="UserStatus"></span>
                    </li>*@
                    <li class="select-time">
                        <label>日期： </label>
                        <input id="startTime" col="StartTime" type="text" class="time-input" placeholder="开始时间" />
                        <span>-</span>
                        <input id="endTime" col="EndTime" type="text" class="time-input" placeholder="结束时间" />
                    </li>
                    <li>
                        <a id="btnSearch" class="btn btn-primary btn-sm" onclick="searchGrid()"><i class="fa fa-search"></i>&nbsp;搜索</a>
                    </li>
                </ul>
            </div>
        </div>

        <div class="col-sm-12 select-table table-bordered">
            <table id="gridTable" data-mobile-responsive="true"></table>
        </div>
        @*<div class="col-sm-12 select-table table-striped">
            <table id="gridTable" data-mobile-responsive="true"></table>
        </div>*@
    </div>
</div>

<script type="text/javascript">
    $(function () {
        initGrid();
        //initTree();

        $('body').layout({ west__size: 185 });

        laydate.render({ elem: '#startTime', format: 'yyyy-MM-dd' });
        laydate.render({ elem: '#endTime', format: 'yyyy-MM-dd' });

        //$("#userStatus").ysComboBox({ data: ys.getJson(@Html.Raw(typeof(StatusEnum).EnumToDictionaryString())) });

        //$('#btnExpand').click(function () {
        //    var tree = $.fn.zTree.getZTreeObj("departmentTree");
        //    tree.expandAll(true);
        //    $(this).hide();
        //    $('#btnCollapse').show();
        //});

        //$('#btnCollapse').click(function () {
        //    var tree = $.fn.zTree.getZTreeObj("departmentTree");
        //    tree.expandAll(false);
        //    $(this).hide();
        //    $('#btnExpand').show();
        //});

        //$('#btnRefresh').click(function () {
        //    initTree();
        //});
    });

    //function initTree() {
    //    $('#departmentTree').ysTree({
    //        url: '@Url.Content("~/OrganizationManage/Department/GetDepartmentTreeListJson")',
    //        async: true,
    //        expandLevel: 2,
    //        maxHeight: "700px",
    //        callback: {
    //            onClick: function (event, treeId, treeNode) {
    //                $("#departmentId").val(treeNode.id);
    //                searchGrid();
    //            }
    //        }
    //    });
    //}
    function initGrid() {
        
        var queryUrl = '@Url.Content("~/ElectChargesManage/ElectCharges/GetListJson")';
        $('#gridTable').ysTable({
            url: queryUrl,
            //showSearch: false,
            //showRefresh: false,
            //showToggle: false,
            //showColumns: false,
            columns: [
                [
                    { title: '当日详情', align: 'center', colspan: 2 },
                    { title: '尖峰', align: 'center', colspan: 3 },
                    { title: '波峰', align: 'center', colspan: 3 },
                    { title: '波谷', align: 'center', colspan: 3 },
                    { title: '低谷', align: 'center', colspan: 3 },
                    { title: '平段', align: 'center', colspan: 4 },
                ],
                //{ checkbox: true, visible: true },
                [
                    {
                        field: 'BaseCreateTime', title: '获取时间', formatter: function (value, row, index) {
                            return ys.formatDate(value, "yyyy-MM-dd");
                        }
                    },
                    { field: 'Id', title: 'Id', visible: false },

                    { field: 'LoopName', title: '回路名称' },

                    { field: 'spike_value', title: '尖峰电量' },
                    { field: 'spike_price', title: '尖峰电价' },
                    //电费
                    { field: 'spike_charges', title: '尖峰电费' },

                    { field: 'peak_value', title: '波峰电量' },
                    { field: 'peak_price', title: '波峰电价' },
                    //电费
                    { field: 'peak_charges', title: '波峰电费' },

                    { field: 'valley_value', title: '波谷电量' },
                    { field: 'valley_price', title: '波谷电价' },
                    //电费
                    { field: 'valley_charges', title: '波谷电费' },

                    { field: 'bottom_value', title: '低谷电量' },
                    { field: 'bottom_price', title: '低谷电价' },
                    //电费
                    { field: 'bottom_charges', title: '低谷电费' },

                    { field: 'normal_value', title: '平段电量' },
                    { field: 'normal_price', title: '平段电价' },
                    //电费
                    { field: 'normal_charges', title: '平段电费' },

                    //{
                    //    field: 'UserStatus', title: '状态', formatter: function (value, row, index) {
                    //        if (row.UserStatus == "@StatusEnum.Yes.ParseToInt()") {
                    //            return '<span class="badge badge-primary">' + "@StatusEnum.Yes.GetDescription()" + '</span>';
                    //        } else {
                    //            return '<span class="badge badge-warning">' + "@StatusEnum.No.GetDescription()" + '</span>';
                    //        }
                    //    }
                    //},
                    //{
                    //    title: '操作',
                    //    align: 'center',
                    //    formatter: function (value, row, index) {
                    //        var actions = [];
                    //        actions.push('<a class="btn btn-warning btn-xs" href="#" onclick="showResetPasswordForm(\'' + row.Id + '\')"><i class="fa fa-key"></i>重置</a>');
                    //        return actions.join('');
                    //    }
                    //}
                ]
                
            ],
            queryParams: function (params) {
                var pagination = $('#gridTable').ysTable('getPagination', params);
                var queryString = $("#searchDiv").getWebControls(pagination);
                return queryString;
            }
        });
    }

    function searchGrid() {
        $('#gridTable').ysTable('search');
        resetToolbarStatus();
    }

    //function showSaveForm(bAdd) {
    //    var id = 0;
    //    if (!bAdd) {
    //        var selectedRow = $("#gridTable").bootstrapTable("getSelections");
    //        if (!ys.checkRowEdit(selectedRow)) {
    //            return;
    //        }
    //        else {
    //            id = selectedRow[0].Id;
    //        }
    //    }
    //    ys.openDialog({
    //        title: id > 0 ? "编辑用户" : "添加用户",
    //        content: '@Url.Content("~/OrganizationManage/User/UserForm")' + '?id=' + id,
    //        callback: function (index, layero) {
    //            var iframeWin = window[layero.find('iframe')[0]['name']];
    //            iframeWin.saveForm(index);
    //        }
    //    });
    //}

    //function deleteForm() {
    //    var selectedRow = $("#gridTable").bootstrapTable("getSelections");
    //    if (ys.checkRowDelete(selectedRow)) {
    //        ys.confirm("确认要删除选中的" + selectedRow.length + "条数据吗？", function () {
    //            var ids = ys.getIds(selectedRow);
    //            ys.ajax({
    //                url: '@Url.Content("~/OrganizationManage/User/DeleteFormJson")' + '?ids=' + ids,
    //                type: "post",
    //                error: ys.ajaxError,
    //                success: function (obj) {
    //                    if (obj.Tag == 1) {
    //                        ys.msgSuccess(obj.Message);
    //                        searchGrid();
    //                    }
    //                    else {
    //                        ys.msgError(obj.Message);
    //                    }
    //                }
    //            });
    //        });
    //    }
    //}

    //function showDepartmentForm() {
    //    var url = '@Url.Content("~/OrganizationManage/Department/DepartmentIndex")';
    //    createMenuItem(url, "部门管理");
    //}

    //function showResetPasswordForm(id) {
    //    ys.openDialog({
    //        title: "重置密码",
    //        content: '@Url.Content("~/OrganizationManage/User/ResetPassword")' + '?id=' + id,
    //        height: "220px",
    //        callback: function (index, layero) {
    //            var iframeWin = window[layero.find('iframe')[0]['name']];
    //            iframeWin.saveForm(index);
    //        }
    //    });
    //}

    //function exportForm() {
    //    var url = '@Url.Content("~/OrganizationManage/User/ExportUserJson")';
    //    var postData = $("#searchDiv").getWebControls();
    //    ys.exportExcel(url, postData);
    //}

    //function importForm() {
    //    ys.openDialog({
    //        title: "导入用户数据",
    //        content: '@Url.Content("~/OrganizationManage/User/UserImport")',
    //        height: "280px",
    //        callback: function (index, layero) {
    //            var iframeWin = window[layero.find('iframe')[0]['name']];
    //            iframeWin.saveForm(index);
    //        }
    //    });
    //}
</script>
